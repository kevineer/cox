//*****************************************************************************//!//! \defgroup Seven_Segment Seven Segment //!//! \brief Seven Segment Character LED display.//!//! An Seven Segment Display(SSD) is a form of electronic display device for//! displaying decimal numerals that is an alternative to the more complex //! dot-matrix displays. It is composed of seven elements. Individually on or//! off, they can be combined to produce simplified representations of arabic//! numerals. Basically there are two types of seven segment display: common//! cathode(all the segments share the same cathode) and common anode(all the//! segments share the same anode).//!//! <img src="7-segments_Indicator.gif" />//!//!//! <h1>Contents</h1>//! - \ref Seven_Segment_Physical//!   - \ref Seven_Segment_Pin//!   - \ref Seven_Segment_CommonPolar//!   - \ref Seven_Segment_CharSegCode//! - \ref Seven_Segment_Func_Desc//!   - \ref Seven_Segment_Func_Init//!   - \ref Seven_Segment_Func_Config//!   - \ref Seven_Segment_Func_Display//!   .//! - \ref Seven_Segment_API_Group//!   - \ref Seven_Segment_API_Init//!   - \ref Seven_Segment_API_Config//!   - \ref Seven_Segment_API_Switch//!   - \ref Seven_Segment_API_Blink//!   - \ref Seven_Segment_API_Display//!   - \ref Seven_Segment_API_Lowlayer//!   .//! - \ref Seven_Segment_Usage//! .//!//! \section Seven_Segment_Physical 1. Seven Segment Physical Block//! \subsection Seven_Segment_Pin 1.1 Seven Segment Pin Description//! Seven Segment Led contains seven segments which are connected to different //! pins. Each segment of Seven Segment Display is described as follows://!//!//! <img src="7seg_pin.png" />//!//! \subsection Seven_Segment_CommonPolar 1.2 Common Polar//! Basically there are two types of seven segment display://! - common cathode where all the segments share the same cathode.//! - common anode where all the segments share the same anode.//! .//!//! <img src="7seg_type.png" />//!//! \subsection Seven_Segment_CharSegCode 1.3 Character Segment Code//! A single byte can encode the full state of a 7-segment-display. The most //! popular bit encodings are gfedcba and abcdefg - both usually assume 0 is //! off and 1 is on. The following table gives the hexadecimal encodings for //! displaying the digits 0 to F://! The segment code of character in character table is described as follows://!//! <img src="7seg_char_segcode.png" />//!//! \section Seven_Segment_Func_Desc 2. Seven Segment Function Description//! \subsection Seven_Segment_Func_Init 2.1 Seven Segment Initalization//! This function can config some pin related to seven segment leds and set leds//! to be default state, then enable timer and use it to scan seven segment leds.//!//! \subsection Seven_Segment_Func_Config 2.2 Seven Segment display configuration//! This function can set a serial parameters related to seven segment operation //! to control character display, such as led on/off, led blink, led blink //! frequence and so on. //! //! \subsection Seven_Segment_Func_Display 2.3 Seven Segment Display//! This function can display some characters on seven segment leds.//!//! \section Seven_Segment_API_Group 3. API Group//! \subsection Seven_Segment_API_Init 3.1 Init API//! Led is inited by://! - LedInit()//! .//! //! \subsection Seven_Segment_API_Config 3.2 Config API//! Led is configured by://! - LedConfig()//! .//!//! \subsection Seven_Segment_API_Switch 3.3 Switch API//! Led is turned on/off://! - LedOn()//! - LedOff()//! .//! //! \subsection Seven_Segment_API_Blink 3.4 Blink API//! Led blink is enable/disable://! - LedBlinkEnable()//! - LedBlinkDisable()//! .//! Led blink frequence is set by://! - LedBlinkFreqSet()//! .//! //! Led blink is configured by://! - LedBlinkSet()//! .//!//! \subsection Seven_Segment_API_Display 3.5 Display API//! Led display is set by://! - CharTabAdd()//! - LedCharSet()//! - LedStringSet()//! - LedNumDisplay()//! - LedFloatDisplay()//! - LedDisplay()//! .//! //! \subsection Seven_Segment_API_Lowlayer 3.6 Lowlayer API//! If the LED API can not meet your need, you can use the API below operated //! on the lowlayer.//! - Open()//! - Close()//! - CharDisplay()//! - StringDisplay()//! .//!//! \section Seven_Segment_Usage Seven_Segment Usage//! //! Before Using the LCD driver, you should configure the LCD moudle, function,//! character font, data interface length, pin remap. Please reference//! \ref Seven_Segment_Config.//!//! Below is some example code://!//! \code//!//! void Seven_SegmentTest(void)//! {//!     int i = 0;//!    //!    ////!    // Leds configure test//!    ////!    LedConfig(0x0F, 0, 0, "CDEF");//!    xSysCtlDelay(xSysCtlClockGet() / 2);//!    LedConfig(0x0F, 0x03, 0, "CDEF");//!    xSysCtlDelay(xSysCtlClockGet() / 2);//!    LedConfig(0x0F, 0x03, 2, "CDEF");//!    xSysCtlDelay(xSysCtlClockGet() / 2);//!    LedConfig(0x0F, 0x03, 2, "2689");//!    xSysCtlDelay(xSysCtlClockGet() / 2);//!    LedConfig(0x03, 0x03, 2, "26");//!    xSysCtlDelay(xSysCtlClockGet() / 2);//!    LedConfig(0x0F, 0, 0, "CDEF");//!    xSysCtlDelay(xSysCtlClockGet() / 2);//!//!    ////!    // Leds display string and numeric test//!    ////!    LedDisplay(0x0F, "ABCd");//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    LedNumDisplay(0x0F, 1230);//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    LedNumDisplay(0x0F, -456);//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    LedFloatDisplay(0x0F, 0.789);//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    LedFloatDisplay(0x0F, -0.34);//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!//!    ////!    // Leds characters set test//!    ////!    LedConfig(0x0F, 0, 0, "2468");//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    LedCharSet(0x01, '7');//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    LedCharSet(0x02, '5');//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    LedCharSet(0x04, '3');//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    LedCharSet(0x08, '1');//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    LedStringSet(0, 4, "7531");//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!//!    ////!    // Leds on\off test//!    ////!    LedConfig(0x0F, 0, 0, "21EF");//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    for (i = 0; i < LED_NUM; i++)//!    {//!        LedOff(0x01 << i);//!        xSysCtlDelay(xSysCtlClockGet() / 4);//!    }//!    i = i - 1;//!    for (; i >= 0; i--)//!    {//!        LedOn(0x01 << i);//!        xSysCtlDelay(xSysCtlClockGet() / 4);//!    }//!//!    ////!    // Leds blink on\off test//!    ////!    LedConfig(0x0F, 0, 0, "0123");//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    for (i = 0; i < LED_NUM; i++)//!    {//!        LedBlinkEnable(0x01 << i);//!        xSysCtlDelay(xSysCtlClockGet() / 4);//!    }//!    i = i - 1;//!    for (; i >= 0; i--)//!    {//!        LedBlinkDisable(0x01 << i);//!        xSysCtlDelay(xSysCtlClockGet() / 4);//!    }//!//!    ////!    // Leds blink frequence test//!    ////!    LedConfig(0x0F, 0x0F, 0, "5678");//!    for (i = 2; i >= 0; i--)//!    {//!        LedBlinkFreqSet(i);//!        xSysCtlDelay(xSysCtlClockGet() / 2);//!    }//!//!    ////!    // Leds blink test//!    ////!    LedConfig(0x0F, 0x0F, 0, "5678");//!    xSysCtlDelay(xSysCtlClockGet() / 2);//!    LedBlinkSet(0x07, 2);//!    xSysCtlDelay(xSysCtlClockGet() / 2);//!    LedBlinkSet(0x03, 1);//!    xSysCtlDelay(xSysCtlClockGet() / 2);//!    LedBlinkSet(0x01, 0);//!     xSysCtlDelay(xSysCtlClockGet() / 2);//!    LedConfig(0x0F, 0x00, 0, "5678");//!    xSysCtlDelay(xSysCtlClockGet() / 2);//!//!    ////!    // Character add to character segment code table test//!    ////!    CharTabAdd('@', 0xA0);//!    LedDisplay(0x03, "@@");//!     xSysCtlDelay(xSysCtlClockGet() / 4);//!    CharTabAdd('v', 0xD5);//!    LedDisplay(0x03, "vv");//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    CharTabAdd('[', 0xC6);//!    LedDisplay(0x03, "[[");//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    CharTabAdd(']', 0xF0);//!    LedDisplay(0x03, "]]");//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!     LedDisplay(0x0F, "[@v]");//!    xSysCtlDelay(xSysCtlClockGet() / 4);//!    //!    LedOff(0x0F);//!//! }//!//! \endcode////*****************************************************************************